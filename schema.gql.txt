### Type definitions saved at 2024-05-24T17:10:41.631Z ###

enum RemoteFileFit {
  COVER
  FILL
  OUTSIDE
  CONTAIN
}

enum RemoteFileFormat {
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

enum RemoteFileLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum RemoteFilePlaceholder {
  DOMINANT_COLOR
  BLURRED
  TRACED_SVG
  NONE
}

enum RemoteFileCropFocus {
  CENTER
  TOP
  RIGHT
  BOTTOM
  LEFT
  ENTROPY
  EDGES
  FACES
}

type RemoteFileResize {
  width: Int
  height: Int
  src: String
}

"""
Remote Interface
"""
interface RemoteFile {
  id: ID!
  mimeType: String!
  filename: String!
  filesize: Int
  width: Int
  height: Int
  publicUrl: String!
  resize(
    width: Int
    height: Int
    aspectRatio: Float
    fit: RemoteFileFit = COVER

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    format: RemoteFileFormat = AUTO
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): RemoteFileResize

  """
  Data used in the <GatsbyImage /> component. See https://gatsby.dev/img for more info.
  """
  gatsbyImage(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: RemoteFileLayout = CONSTRAINED

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: RemoteFilePlaceholder = DOMINANT_COLOR

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP, AVIF], and you should rarely need to
    change this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [RemoteFileFormat!] = [AUTO, WEBP, AVIF]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, and [0.25, 0.5, 1, 2]
    for fluid. In this case, an image with a fluid layout and width = 400 would
    generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float] = [0.25, 0.5, 1, 2]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int] = [750, 1080, 1366, 1920]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    fit: RemoteFileFit = COVER
    cropFocus: [RemoteFileCropFocus]
    quality: Int = 75
  ): GatsbyImageData
}

type File implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
  blksize: Int
  blocks: Int
}

type Directory implements Node @dontInfer {
  sourceInstanceName: String!
  absolutePath: String!
  relativePath: String!
  extension: String!
  size: Int!
  prettySize: String!
  modifiedTime: Date! @dateformat
  accessTime: Date! @dateformat
  changeTime: Date! @dateformat
  birthTime: Date! @dateformat
  root: String!
  dir: String!
  base: String!
  ext: String!
  name: String!
  relativeDirectory: String!
  dev: Int!
  mode: Int!
  nlink: Int!
  uid: Int!
  gid: Int!
  rdev: Int!
  ino: Float!
  atimeMs: Float!
  mtimeMs: Float!
  ctimeMs: Float!
  atime: Date! @dateformat
  mtime: Date! @dateformat
  ctime: Date! @dateformat
  birthtime: Date @deprecated(reason: "Use `birthTime` instead")
  birthtimeMs: Float @deprecated(reason: "Use `birthTime` instead")
}

type Site implements Node @dontInfer {
  buildTime: Date @dateformat
  siteMetadata: SiteSiteMetadata
  port: Int
  host: String
  polyfill: Boolean
  pathPrefix: String
  jsxRuntime: String
  trailingSlash: String
  graphqlTypegen: Boolean
}

type SiteSiteMetadata {
  title: String
  description: String
  author: String
  copyright: String
  image: String
  siteUrl: String
  twitterUsername: String
}

type SiteFunction implements Node @dontInfer {
  functionRoute: String!
  pluginName: String!
  originalAbsoluteFilePath: String!
  originalRelativeFilePath: String!
  relativeCompiledFilePath: String!
  absoluteCompiledFilePath: String!
  matchPath: String
}

type SitePage implements Node @dontInfer {
  path: String!
  component: String!
  internalComponentName: String!
  componentChunkName: String!
  matchPath: String
  pageContext: JSON @proxy(from: "context", fromNode: false)
  pluginCreator: SitePlugin @link(by: "id", from: "pluginCreatorId")
}

type SitePlugin implements Node @dontInfer {
  resolve: String
  name: String
  version: String
  nodeAPIs: [String]
  browserAPIs: [String]
  ssrAPIs: [String]
  pluginFilepath: String
  pluginOptions: JSON
  packageJson: JSON
}

type SiteBuildMetadata implements Node @dontInfer {
  buildTime: Date @dateformat
}

interface ContentfulEntry implements Node {
  contentful_id: String!
  id: ID!
  node_locale: String!
}

interface ContentfulReference {
  contentful_id: String!
  id: ID!
}

enum ImageResizingBehavior {
  NO_CHANGE

  """
  Same as the default resizing, but adds padding so that the generated image has the specified dimensions.
  """
  PAD

  """
  Crop a part of the original image to match the specified size.
  """
  CROP

  """
  Crop the image to the specified dimensions, if the original image is smaller
  than these dimensions, then the image will be upscaled.
  """
  FILL

  """
  When used in association with the f parameter below, creates a thumbnail from the image based on a focus area.
  """
  THUMB

  """
  Scale the image regardless of the original aspect ratio.
  """
  SCALE
}

enum ContentfulImageCropFocus {
  TOP
  TOP_LEFT
  TOP_RIGHT
  BOTTOM
  BOTTOM_RIGHT
  BOTTOM_LEFT
  RIGHT
  LEFT
  FACE
  FACES
  CENTER
}

type ContentfulAsset implements ContentfulReference & Node & RemoteFile
  @derivedTypes
  @dontInfer {
  contentful_id: String!
  gatsbyImageData(
    """
    The layout for the image.
    FIXED: A static image sized, that does not resize according to the screen width
    FULL_WIDTH: The image resizes to fit its container. Pass a "sizes" option if
    it isn't going to be the full width of the screen.
    CONSTRAINED: Resizes to fit its container, up to a maximum width, at which point it will remain fixed in size.
    """
    layout: GatsbyImageLayout

    """
    The display width of the generated image for layout = FIXED, and the display
    width of the largest image for layout = CONSTRAINED.
    The actual largest image resolution will be this value multiplied by the largest value in outputPixelDensities
    Ignored if layout = FLUID.
    """
    width: Int

    """
    If set, the height of the generated image. If omitted, it is calculated from
    the supplied width, matching the aspect ratio of the source image.
    """
    height: Int

    """
    If set along with width or height, this will set the value of the other
    dimension to match the provided aspect ratio, cropping the image if needed.
    If neither width or height is provided, height will be set based on the intrinsic width of the source image.
    """
    aspectRatio: Float

    """
    Format of generated placeholder image, displayed while the main image loads.
    BLURRED: a blurred, low resolution image, encoded as a base64 data URI.
    DOMINANT_COLOR: a solid color, calculated from the dominant color of the image (default).
    TRACED_SVG: deprecated. Will use DOMINANT_COLOR.
    NONE: no placeholder. Set the argument "backgroundColor" to use a fixed background color.
    """
    placeholder: GatsbyImagePlaceholder

    """
    The image formats to generate. Valid values are AUTO (meaning the same
    format as the source image), JPG, PNG, WEBP and AVIF.
    The default value is [AUTO, WEBP], and you should rarely need to change
    this. Take care if you specify JPG or PNG when you do
    not know the formats of the source images, as this could lead to unwanted
    results such as converting JPEGs to PNGs. Specifying
    both PNG and JPG is not supported and will be ignored.
    """
    formats: [GatsbyImageFormat] = [NO_CHANGE, WEBP]

    """
    A list of image pixel densities to generate for FIXED and CONSTRAINED
    images. You should rarely need to change this. It will never generate images
    larger than the source, and will always include a 1x image.
    Default is [ 1, 2 ] for fixed images, meaning 1x, 2x, 3x, and [0.25, 0.5, 1,
    2] for fluid. In this case, an image with a fluid layout and width = 400
    would generate images at 100, 200, 400 and 800px wide.
    """
    outputPixelDensities: [Float]

    """
    Specifies the image widths to generate. You should rarely need to change
    this. For FIXED and CONSTRAINED images it is better to allow these to be
    determined automatically,
    based on the image size. For FULL_WIDTH images this can be used to override
    the default, which is [750, 1080, 1366, 1920].
    It will never generate any images larger than the source.
    """
    breakpoints: [Int]

    """
    The "sizes" property, passed to the img tag. This describes the display size of the image.
    This does not affect the generated images, but is used by the browser to
    decide which images to download. You can leave this blank for fixed images,
    or if the responsive image
    container will be the full width of the screen. In these cases we will generate an appropriate value.
    """
    sizes: String

    """
    Background color applied to the wrapper, or when "letterboxing" an image to another aspect ratio.
    """
    backgroundColor: String
    jpegProgressive: Boolean = true
    resizingBehavior: ImageResizingBehavior
    cropFocus: ContentfulImageCropFocus

    """
    Desired corner radius in pixels. Results in an image with rounded corners.
    Pass `-1` for a full circle/ellipse.
    """
    cornerRadius: Int
    quality: Int = 50
  ): GatsbyImageData!
  file: ContentfulAssetFile
  description: String
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  title: String
  node_locale: String
  sys: ContentfulAssetSys
  url: String
  placeholderUrl: String
  mimeType: String
  filename: String
  width: Int
  height: Int
  size: Int
}

enum GatsbyImageLayout {
  FIXED
  FULL_WIDTH
  CONSTRAINED
}

enum GatsbyImagePlaceholder {
  DOMINANT_COLOR
  TRACED_SVG
  BLURRED
  NONE
}

enum GatsbyImageFormat {
  NO_CHANGE
  AUTO
  JPG
  PNG
  WEBP
  AVIF
}

type ContentfulAssetFile @derivedTypes {
  url: String
  details: ContentfulAssetFileDetails
  fileName: String
  contentType: String
}

type ContentfulAssetFileDetails @derivedTypes {
  size: Int
  image: ContentfulAssetFileDetailsImage
}

type ContentfulAssetFileDetailsImage {
  width: Int
  height: Int
}

type ContentfulAssetSys {
  type: String
  revision: Int
}

type ContentfulPost implements ContentfulReference & ContentfulEntry & Node
  @derivedTypes
  @dontInfer {
  contentful_id: String!
  node_locale: String!
  title: String
  slug: String
  date: Date @dateformat
  description: String
  body: ContentfulPostBody
  featuredImage: ContentfulAsset
  spaceId: String
  createdAt: Date @dateformat
  updatedAt: Date @dateformat
  sys: ContentfulPostSys
}

type ContentfulPostBody {
  raw: String
  references: [ContentfulAsset]
}

type ContentfulPostSys @derivedTypes {
  type: String
  revision: Int
  contentType: ContentfulPostSysContentType
}

type ContentfulPostSysContentType @derivedTypes {
  sys: ContentfulPostSysContentTypeSys
}

type ContentfulPostSysContentTypeSys {
  type: String
  linkType: String
  id: String
}

type MarkdownHeading {
  id: String
  value: String
  depth: Int
}

enum MarkdownHeadingLevels {
  h1
  h2
  h3
  h4
  h5
  h6
}

enum MarkdownExcerptFormats {
  PLAIN
  HTML
  MARKDOWN
}

type MarkdownWordCount {
  paragraphs: Int
  sentences: Int
  words: Int
}

type MarkdownRemark implements Node
  @childOf(mimeTypes: ["text/markdown", "text/x-markdown"], types: ["File"])
  @derivedTypes
  @dontInfer {
  frontmatter: MarkdownRemarkFrontmatter
  excerpt: String
  rawMarkdownBody: String
  fileAbsolutePath: String
}

type MarkdownRemarkFrontmatter {
  title: String
  date: String
  published: Boolean
  description: String
  thumbnail: String
  thumbnailAlt: String
}

type StripeProduct implements Node @dontInfer {
  object: String
  active: Boolean
  created: Int
  default_price: String
  description: String
  images: [String]
  livemode: Boolean
  name: String
  tax_code: String
  type: String
  updated: Int
}

type StripeBalanceTransaction implements Node @derivedTypes @dontInfer {
  object: String
  amount: Int
  available_on: Int
  created: Int
  currency: String
  description: String
  fee: Int
  fee_details: [StripeBalanceTransactionFee_details]
  net: Int
  reporting_category: String
  source: StripeBalanceTransactionSource
  status: String
  type: String
}

type StripeBalanceTransactionFee_details {
  amount: Int
  currency: String
  description: String
  type: String
}

type StripeBalanceTransactionSource @derivedTypes {
  id: String
  object: String
  amount: Int
  arrival_date: Int
  automatic: Boolean
  balance_transaction: String
  created: Int
  currency: String
  description: String
  destination: StripeBalanceTransactionSourceDestination
  livemode: Boolean
  method: String
  reconciliation_status: String
  source_type: String
  status: String
  type: String
  amount_captured: Int
  amount_refunded: Int
  billing_details: StripeBalanceTransactionSourceBilling_details
  calculated_statement_descriptor: String
  captured: Boolean
  disputed: Boolean
  outcome: StripeBalanceTransactionSourceOutcome
  paid: Boolean
  payment_intent: String
  payment_method: String
  payment_method_details: StripeBalanceTransactionSourcePayment_method_details
  receipt_url: String
  refunded: Boolean
}

type StripeBalanceTransactionSourceDestination {
  id: String
  object: String
  account: String
  available_payout_methods: [String]
  bank_name: String
  country: String
  currency: String
  default_for_currency: Boolean
  fingerprint: String
  last4: Date @dateformat
  routing_number: String
  status: String
}

type StripeBalanceTransactionSourceBilling_details @derivedTypes {
  address: StripeBalanceTransactionSourceBilling_detailsAddress
  email: String
  name: Date @dateformat
}

type StripeBalanceTransactionSourceBilling_detailsAddress {
  country: String
  postal_code: String
}

type StripeBalanceTransactionSourceOutcome {
  network_status: String
  risk_level: String
  risk_score: Int
  seller_message: String
  type: String
}

type StripeBalanceTransactionSourcePayment_method_details @derivedTypes {
  card: StripeBalanceTransactionSourcePayment_method_detailsCard
  type: String
}

type StripeBalanceTransactionSourcePayment_method_detailsCard @derivedTypes {
  amount_authorized: Int
  brand: String
  checks: StripeBalanceTransactionSourcePayment_method_detailsCardChecks
  country: String
  exp_month: Int
  exp_year: Int
  extended_authorization: StripeBalanceTransactionSourcePayment_method_detailsCardExtended_authorization
  fingerprint: String
  funding: String
  incremental_authorization: StripeBalanceTransactionSourcePayment_method_detailsCardIncremental_authorization
  last4: Date @dateformat
  multicapture: StripeBalanceTransactionSourcePayment_method_detailsCardMulticapture
  network: String
  network_token: StripeBalanceTransactionSourcePayment_method_detailsCardNetwork_token
  overcapture: StripeBalanceTransactionSourcePayment_method_detailsCardOvercapture
  wallet: StripeBalanceTransactionSourcePayment_method_detailsCardWallet
}

type StripeBalanceTransactionSourcePayment_method_detailsCardChecks {
  address_postal_code_check: String
  cvc_check: String
}

type StripeBalanceTransactionSourcePayment_method_detailsCardExtended_authorization {
  status: String
}

type StripeBalanceTransactionSourcePayment_method_detailsCardIncremental_authorization {
  status: String
}

type StripeBalanceTransactionSourcePayment_method_detailsCardMulticapture {
  status: String
}

type StripeBalanceTransactionSourcePayment_method_detailsCardNetwork_token {
  used: Boolean
}

type StripeBalanceTransactionSourcePayment_method_detailsCardOvercapture {
  maximum_amount_capturable: Int
  status: String
}

type StripeBalanceTransactionSourcePayment_method_detailsCardWallet {
  type: String
}

type StripeBalance implements Node @derivedTypes @dontInfer {
  object: String
  available: [StripeBalanceAvailable]
  livemode: Boolean
  pending: [StripeBalancePending]
}

type StripeBalanceAvailable @derivedTypes {
  amount: Int
  currency: String
  source_types: StripeBalanceAvailableSource_types
}

type StripeBalanceAvailableSource_types {
  card: Int
}

type StripeBalancePending @derivedTypes {
  amount: Int
  currency: String
  source_types: StripeBalancePendingSource_types
}

type StripeBalancePendingSource_types {
  card: Int
}

type ContentfulContentType implements Node @derivedTypes @dontInfer {
  name: String
  displayField: String
  description: String
  sys: ContentfulContentTypeSys
}

type ContentfulContentTypeSys {
  type: String
}
